{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","id","name","photo","path","className","s","dialog","active","personPhoto","src","personeName","Message","message","Textarea","FormControl","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"8MAIIA,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAERE,EAAmB,SAACC,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eAHJ,GACbC,IAAML,WAWtC,OAHqCM,YAAQX,EAARW,CACnCL,K,oBChBJM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,4B,oBCAhED,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,4BAA4B,YAAc,iCAAiC,YAAc,mC,oBCAzJD,EAAOC,QAAU,CAAC,QAAU,2B,iHCiBbC,EAdI,SAACN,GAAW,IACrBO,EAAoBP,EAApBO,GAAIC,EAAgBR,EAAhBQ,KAAMC,EAAUT,EAAVS,MACdC,EAAI,mBAAeH,GAEvB,OACE,yBAAKI,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACjC,kBAAC,IAAD,CAASH,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAQb,GAAIS,GACjD,yBAAKC,UAAWC,IAAEG,YAAaC,IAAKP,IACpC,yBAAKE,UAAWC,IAAEK,aAAcT,M,kBCAzBU,EATC,SAAClB,GACf,OACE,yBAAKW,UAAWC,IAAEO,SAChB,+BACCnB,EAAMmB,U,iCCCTC,EAAWC,YAAY,YAEvBC,EAAcC,YAAiB,IA8C7BC,EAAsBC,YAAU,CACpCC,KAAM,wBADoBD,EAjBL,SAACzB,GACtB,OACE,0BAAM2B,SAAU3B,EAAM4B,cACpB,6BACE,kBAACC,EAAA,EAAD,CACEC,YAAY,qBACZtB,KAAK,iBACLuB,UAAWX,EACXY,SAAU,CAACC,IAAUX,MAGzB,6BACE,wDAQOY,EAhDC,SAAClC,GACf,IAAIP,EAAQO,EAAMmC,YAEdC,EAAkB3C,EAAM4C,QAAQC,KAAI,SAACC,GAAD,OACtC,kBAAC,EAAD,CAAYC,IAAKD,EAAEhC,GAAIC,KAAM+B,EAAE/B,KAAMD,GAAIgC,EAAEhC,GAAIE,MAAO8B,EAAE9B,WAEtDgC,EAAmBhD,EAAMiD,SAASJ,KAAI,SAACK,GAAD,OACxC,kBAAC,EAAD,CAASH,IAAKG,EAAEpC,GAAIY,QAASwB,EAAExB,aAMjC,OACE,yBAAKR,UAAWC,IAAEyB,SAChB,yBAAK1B,UAAWC,IAAEgC,cACfR,GAMH,yBAAKzB,UAAWC,IAAE8B,UAAWD,GAC7B,kBAACjB,EAAD,CAAqBG,SAbL,SAACkB,GACnB7C,EAAM8C,YAAYD,EAAOE,qB,wBCHdC,sBACb7C,aAdsB,SAACV,GACvB,MAAO,CACL0C,YAAa1C,EAAM0C,gBAGI,SAACc,GAC1B,MAAO,CACLH,YAAa,SAACC,GACZE,EAASC,YAAmBH,SAOhCnD,IAFaoD,CAGbd","file":"static/js/4.e1a20958.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2NwQs\",\"messages\":\"Dialogs_messages__3RMrq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3XW2s\",\"active\":\"DialogsItem_active__1gqBv\",\"personPhoto\":\"DialogsItem_personPhoto__1C8tA\",\"personeName\":\"DialogsItem_personeName__2jSLV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3gS78\"};","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  const { id, name, photo } = props;\r\n  let path = `/dialogs/${id}`;\r\n\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink className={s.dialog + \" \" + s.active} to={path}>\r\n        <img className={s.personPhoto} src={photo} />\r\n        <div className={s.personeName}>{name}</div>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.message}>\r\n      <span></span>\r\n      {props.message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { FormControl } from \"../common/FormsControls/FormsControls\";\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\r\n\r\nlet Textarea = FormControl(\"textarea\");\r\n\r\nlet maxLength50 = maxLengthCreator(50);\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem key={d.id} name={d.name} id={d.id} photo={d.photo} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message key={m.id} message={m.message} />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n        {/* <DialogItem name={dialogsData[0].name} id={dialogsData[0].id} />\r\n        <DialogItem name={dialogsData[1].name} id={dialogsData[1].id} />\r\n        <DialogItem name={dialogsData[2].name} id={dialogsData[2].id} />\r\n        <DialogItem name={dialogsData[3].name} id={dialogsData[3].id} /> */}\r\n      </div>\r\n      <div className={s.messages}>{messagesElements}</div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Enter your message\"\r\n          name=\"newMessageBody\"\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n        ></Field>\r\n      </div>\r\n      <div>\r\n        <button>Add new message</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: \"dialogAddMessageForm\",\r\n})(AddMessageForm);\r\nexport default Dialogs;\r\n","import { sendMessageCreator } from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}